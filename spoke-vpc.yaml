AWSTemplateFormatVersion: '2010-09-09'
Description: The template creates the Spoke VPC
Parameters:
  CidrBlock:
    Default: '10.1.0.0/16'
    Description: The CIDR Block for the VPC
    Type: String
  SubnetCidrBlock:
    Default: '10.1.0.0/24'
    Description: The CIDR Block for the Subnet
    Type: String
  Environment:
    Default: dev
    Description: The environment
    Type: String
    AllowedValues:
      - dev
      - prod
      - shared
  StudentId:
    Description: The student number
    Type: String
    AllowedPattern: "[0-9]+"
    ConstraintDescription: Malformed input-Parameter StudentId must only contain numbers
  AmazonLinuxAMI:
    Type: String
    Description: DO NOT CHANGE - AMI Used for test instance.
    # Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    # Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    # Description: DO NOT CHANGE - AMI Used for test instance.

Resources:


  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub student${StudentId}-${Environment}-vpc
  ProtectedSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref SubnetCidrBlock
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub student${StudentId}-${Environment}-private1-subnet
  ProtectedRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub student${StudentId}-${Environment}-route-table
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'ProtectedSubnet'
      RouteTableId: !Ref 'ProtectedRouteTable'
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub student${StudentId}-${Environment}-network-acl
  InboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  OutboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl'
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  PublicEgressVpcSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'ProtectedSubnet'
      NetworkAclId: !Ref 'NetworkAcl'


  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 10.0.0.0/8
        SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  SsmVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      SubnetIds: 
        - !Ref ProtectedSubnet
      VpcEndpointType: Interface
      VpcId: !Ref VPC 
  SessionManagerVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      SubnetIds: 
        - !Ref ProtectedSubnet
      VpcEndpointType: Interface
      VpcId: !Ref VPC 
  rInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: "/"

  rInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref rInstanceRole

  EC2TestInstance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref rInstanceProfile
      ImageId: !Ref AmazonLinuxAMI
      InstanceType: t2.micro
      Monitoring: false
      SubnetId: !Ref ProtectedSubnet
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      UserData: !Base64 |
        #!/bin/bash -ex
        yum -y install links
      Tags:
        - Key: Name
          Value: !Sub student${StudentId}-${Environment}-instance

Outputs:

  SpokeProtectedRouteTable:
    Value: !Ref ProtectedRouteTable
  EC2TestInstance:
      Value: !Ref EC2TestInstance
      Description: Test Instance for internet access.
